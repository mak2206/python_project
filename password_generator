####### PROJECT ON PASSWORD GENERATOR #########
####### CREATED BY AKSHAY MAKWANA #############

#importing the modules
import random
import string

# definging the function for taking and checking the user's input 
def user_interface():  

    # Ask user for the amount of passwords to generate
    while True:
        try:
            # Asking user for how many passwords needs to be generated
            amount_of_passwords = int(input("Enter the amount of passwords to generate: ")) 
            if amount_of_passwords > 0: #Checking the condition as it should be greater than 0.
                break
            else:
                # Returning the message to user for incorrect value.
                print("The number should be greater than 0. Please try again.") 

        except ValueError:
            # Returning themessage to user to enter a valid number.
            print("Invalid input. Please enter a valid number.")


    while True:
        try:
            # Asking user the length of password to be generated should be greater or equal to 8.
            min_length = int(input("Please enter a number greater or equal than 8: "))
            if min_length >= 8:
                break
        
            else:
            #If the input is below 8 returing the message back to the user.    
                print("The number should be greater or equal to 8. Please try again.")
        
        except ValueError:
            # Returning the message to user to enter a valid number.
            print("Invalid input. Please enter a valid number.")
        
    #Asking user if he requires numbers in his password and validating the input in y and n.
    has_number = input("Do you want to have numbers(y/n)? ").lower() == "y"
    
    #Asking user if he requires Special characters in his password and validating the input in y and n.
    has_special = input("Do you want to have Special characters(y/n)? ").lower() == "y"
    
    #Asking user if he requires Spaces in his password and validating the input in y and n.
    has_space = input("Do you want to have Space(y/n)? ").lower() == "y"
    return min_length, has_number, has_special, has_space , amount_of_passwords

# definging the function for generating password 
def generate_password(min_length, has_number, has_special, has_space):
    characters = string.ascii_letters  #Storing upper and lower alphabet into string
    
    #if user wants numbers in his password then adding the numbers into string
    if has_number:    
        characters += string.digits

    #if user wants Special characters in his password then adding the special characters into string    
    if has_special:
        characters += string.punctuation
    

    #Selects the random characters from the string with the minimum length 
    #Provided by the user and Joines together into one string
    
    pwd = ''.join(random.choices(characters, k=min_length))
    

##########################################################################################
#                                                                                        #  
#               CHECKING THE ONLY CONDTION FOR SPACE INPUT FROM THE USER                 #                                                                           
#                                                                                        #
##########################################################################################    
     #if user ONLY wants SPACE in his password
    if has_space:  

        char_list = list(pwd)  #CONVERTING STRING INTO LIST Characters

        # Random index within the range of the length is generated
        #Range is kept from 1st and 2nd last postion of password length
        #To avoid the confusion of space in the string
        random_index = random.randint(1,len(char_list)-2) 

        #Randomly generated index is replaced with a space.
        char_list[random_index] = ' '

        #Finally, the list of characters is joined back into a string
        pwd = ''.join(char_list)

    #if user wants SPACE,NUMBER AND SPECIAL CHARACHTERS in his password

    if has_space and has_number and has_special:
        
        #if user wants numbers in his password then adding the numbers into string
        characters += string.digits

        #if user wants Special characters in his password then adding the special characters into string    
        characters += string.punctuation

        #Selects the random characters from the string with the minimum length 
        #Provided by the user and Joines together into one string
        pwd = ''.join(random.choices(characters, k=min_length))
        
        char_list = list(pwd)  #CONVERTING STRING INTO LIST Characters

        # Random index within the range of the length is generated
        #Range is kept from 1st and 2nd last postion of password length
        #To avoid the confusion of space in the string
        random_index = random.randint(1,len(char_list)-2) 

        char_list[random_index] = ' '   #Finally, the list of characters is joined back into a string

        #Finally, the list of characters is joined back into a string
        pwd = ''.join(char_list)


    #if user wants SPACE AND NUMBER  in his password
    if has_space and has_number:
    
        #if user wants numbers in his password then adding the numbers into string
        characters += string.digits

        #Selects the random characters from the string with the minimum length 
        #Provided by the user and Joines together into one string
        pwd = ''.join(random.choices(characters, k=min_length))
        
        char_list = list(pwd)  #CONVERTING STRING INTO LIST Characters

        # Random index within the range of the length is generated
        #Range is kept from 1st and 2nd last postion of password length
        #To avoid the confusion of space in the string
        random_index = random.randint(1,len(char_list)-2)
        
        char_list[random_index] = ' '   #Finally, the list of characters is joined back into a string
        
        #Finally, the list of characters is joined back into a string
        pwd = ''.join(char_list)



    #if user wants SPACE AND SPECIAL CHARACHTERS in his password
    if has_space and has_special:
        
        #if user wants Special characters in his password then adding the special characters into string    
        characters += string.punctuation

        #Selects the random characters from the string with the minimum length 
        #Provided by the user and Joines together into one string
        pwd = ''.join(random.choices(characters, k=min_length))
        
        char_list = list(pwd)  #CONVERTING STRING INTO LIST Characters
        
        # Random index within the range of the length is generated
        #Range is kept from 1st and 2nd last postion of password length
        #To avoid the confusion of space in the string    
        random_index = random.randint(1,len(char_list)-2)
        
        char_list[random_index] = ' '      #Finally, the list of characters is joined back into a string

        #Finally, the list of characters is joined back into a string
        pwd = ''.join(char_list)

    return pwd         

# Get user input using user_interface function
min_length, has_number, has_special, has_space , amount_of_passwords= user_interface()

# Generate using generate_password function and display the passwords
for i in range(amount_of_passwords):
    pwd = generate_password(min_length, has_number, has_special, has_space)
    print("Generated Password is:", pwd)
